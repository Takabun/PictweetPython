"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 2.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '1+nrn&gh&=d^f65&+jf!m%k#ilcg11j4(25hnsg11*7zeg(45v'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'pictweetpython2.apps.Pictweetpython2Config', ##Pictweetアプリ。なぜか、記入するとエラー
    'sass_processor', #sassの関連

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'storages', 

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    # ↓sqliteの時はこうだった
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

#↓sass関連
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)
SASS_PROCESSOR_ROOT = 'static'


# #accountsアプリ関連(accontsアプリを経由してログインする時は使用)
# LOGIN_URL = 'login' # ログインしていないときのリダイレクト先
# LOGIN_REDIRECT_URL = 'index' # ログイン後のリダイレクト先
# LOGOUT_REDIRECT_URL = 'index' # ログアウト後のリダイレクト先

#Pictweetログイン関連()
LOGIN_URL='pictweetpython2:login'     # ログイン
LOGOUT_URL='pictweetpython2:logout'   # ログアウト
LOGIN_REDIRECT_URL='pictweetpython2:index'      # ログイン
LOGOUT_REDIRECT_URL='pictweetpython2:login'    # ログアウト


#画像投稿関連
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'



#local_setting関連.この記事の通りだとなぜかうまくいかなかった
# DEBUG = False
# try:
#     from .local_settings import *
# except ImportError:
#     pass

# if not DEBUG:
#     import django_heroku
#     django_heroku.settings(locals())



#↓新しい記事
import dj_database_url
DATABASES['default'] = dj_database_url.config()

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

ALLOWED_HOSTS = ['*']

STATIC_ROOT = 'staticfiles'

#なぜか、debug= Trueにしたらcssが読み込まれた！！(migrationの時はFalseだったけど)
DEBUG = True

try:
    from .local_settings import *
except ImportError:
    pass



# STATIC_ROOT:集約用の管理コマンド「manage.py collectstatic」を実行した時に、staticファイルがコピーされるディレクトリのパス。
# https://docs.djangoproject.com/en/1.9/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

#STATIC_URL:配信用のディレクトリ名.外部から見ると、プロジェクトのURL + 配信用のURL という形式となります。
# デフォルトの「'/static/'」から変更することはあまり無いでしょう。
STATIC_URL = '/static/' # localでcssを読み込むためのパス(たぶん)


# 各アプリケーションのstatic以外に配信するディレクトリがある場合に追加する。
# 例：全アプリケーションが共通で使う静的ファイルがある場合、プロジェクトディレクトリ直下にstaticディレクトリを作成し、STATICFILES_DIRSにパスを追加する。オプションでSTATIC_URLとは異なる名前で公開できます。
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'), # サーバでcssを読み込むためのパス
)

#Amazon S3 や CDNを利用する際には、下記を記載する
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'



if DEBUG:

    AWS_ACCESS_KEY_ID = os.environ['AWS_ACCESS_KEY_ID']
    AWS_SECRET_ACCESS_KEY = os.environ['AWS_SECRET_ACCESS_KEY']
    AWS_STORAGE_BUCKET_NAME = os.environ['AWS_STORAGE_BUCKET_NAME']

    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage'
    S3_URL = 'http://%s.s3.amazonaws.com/' % AWS_STORAGE_BUCKET_NAME
    MEDIA_URL = S3_URL

    AWS_S3_FILE_OVERWRITE = False
    AWS_DEFAULT_ACL = None

    import django_heroku
    django_heroku.settings(locals())

db_from_env = dj_database_url.config(conn_max_age=600, ssl_require=True)
DATABASES['default'].update(db_from_env)